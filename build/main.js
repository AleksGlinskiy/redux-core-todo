(()=>{"use strict";var r={800:(r,o,n)=>{n.d(o,{Z:()=>i});var e=n(537),t=n.n(e),A=n(645),a=n.n(A)()(t());a.push([r.id,':root{--bg-color: #f9f9f9;--bg-box-color: #fff;--font-color: #0d1329;--border-color: #edf0f6;--primary-color: #2954ed;--primary-color-hover: #0038ff;--hover-color: #f5f8ff;--done-color: #9de798;--error-color: #fa8e79;--bg-disabled-color: #eef0f3;--text-disabled-color: #aeb3c5;--font-family: "Nunito Sans", sans-serif}*{margin:0;padding:0;box-sizing:border-box}input,button{margin:0;padding:0;font-size:15px;font-family:var(--font-family)}body{background-color:var(--bg-color);color:var(--font-color);font-family:var(--font-family);font-size:15px}.wrapper{height:100%;padding:3vw 0}.page-title{display:block;text-align:center;margin-bottom:1vw;text-transform:uppercase;font-weight:900}.input{display:block;min-height:42px;line-height:42px;padding:0 20px;background-color:var(--bg-box-color);border:1px solid var(--border-color);border-radius:10px;box-shadow:0 0 0 0;transition:border-color .3s,box-shadow .3s}.input:focus{outline:none;border-color:var(--primary-color);box-shadow:0 0 0 2px var(--primary-color)}.input:hover{border-color:var(--primary-color)}.btn{display:inline-block;min-height:42px;line-height:42px;padding:0 30px;background-color:var(--primary-color);color:var(--bg-box-color);border:1px solid var(--primary-color);border-radius:10px;font-weight:700;cursor:pointer;transition:background-color .3s,border-color .3s,box-shadow .3s}.btn:focus-visible{outline:none;border-color:var(--primary-color-hover);box-shadow:0 0 0 2px var(--primary-color-hover)}.btn:hover{background-color:var(--primary-color-hover);border-color:var(--primary-color-hover)}.btn:disabled{cursor:default;background-color:var(--bg-disabled-color);border-color:var(--bg-disabled-color);color:var(--text-disabled-color)}.btn-ico{display:inline-block;width:42px;min-width:42px;min-height:42px;line-height:42px;background-color:var(--hover-color);color:var(--primary-color);border:0;border-radius:10px;cursor:pointer;transition:background-color .3s,border-color .3s,box-shadow .3s,color .3s}.btn-ico:focus-visible{outline:none;border-color:var(--primary-color-hover);box-shadow:0 0 0 2px var(--primary-color-hover)}.btn-ico:hover{background-color:var(--primary-color-hover);border-color:var(--primary-color-hover)}.btn-ico:disabled{cursor:default;background-color:var(--bg-disabled-color);border-color:var(--bg-disabled-color);color:var(--text-disabled-color)}.app-todo{width:100%;max-width:700px;margin:0 auto;background-color:var(--bg-box-color);border-radius:clamp(10px,1.5vw,30px);overflow:hidden}@media(max-width: 720px){.app-todo{max-width:90%}}.app-todo__header{padding:clamp(15px,2.5vw,50px) clamp(15px,1.5vw,30px);border-bottom:1px solid var(--border-color)}.app-todo__form{display:flex;align-items:center}.app-todo__form .input{flex-basis:80%}.app-todo__form .btn{flex-basis:20%;margin-left:15px}.app-todo__list .empty-list{display:block;padding:20px clamp(15px,1.5vw,30px);text-align:center}.todo-block{display:flex;align-items:center;justify-content:space-between;padding:20px clamp(15px,1.5vw,30px)}.todo-block:hover{background-color:var(--hover-color)}.todo-block:hover .todo-block__btn{background-color:var(--primary-color);color:var(--bg-box-color)}.todo-block:hover .todo-block__btn-toggle{opacity:1}.todo-block__time{display:block;font-size:12px}.todo-block__btns{display:flex;align-items:center;justify-content:flex-end;margin-left:20px}.todo-block__btn{margin-left:15px}.todo-block__btn-toggle{opacity:0;background-color:var(--done-color);color:var(--bg-box-color)}.todo-block__btn-toggle.done{background-color:var(--error-color)}.todo-block--completed span{color:var(--text-disabled-color);text-decoration:line-through}',"",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,MACI,mBAAA,CACA,oBAAA,CACA,qBAAA,CACA,uBAAA,CACA,wBAAA,CACA,8BAAA,CACA,sBAAA,CAEA,qBAAA,CACA,sBAAA,CAEA,4BAAA,CACA,8BAAA,CAEA,wCAAA,CAGJ,EACI,QAAA,CACA,SAAA,CACA,qBAAA,CAGJ,aACI,QAAA,CACA,SAAA,CACA,cAAA,CACA,8BAAA,CAGJ,KACI,gCAAA,CACA,uBAAA,CACA,8BAAA,CACA,cAAA,CAGJ,SACI,WAAA,CACA,aAAA,CAGJ,YACI,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,wBAAA,CACA,eAAA,CAGJ,OACI,aAAA,CACA,eAAA,CACA,gBAAA,CACA,cAAA,CACA,oCAAA,CACA,oCAAA,CACA,kBAAA,CACA,kBAAA,CACA,0CAAA,CAEA,aACI,YAAA,CACA,iCAAA,CACA,yCAAA,CAGJ,aACI,iCAAA,CAIR,KACI,oBAAA,CACA,eAAA,CACA,gBAAA,CACA,cAAA,CACA,qCAAA,CACA,yBAAA,CACA,qCAAA,CACA,kBAAA,CACA,eAAA,CACA,cAAA,CACA,+DAAA,CAEA,mBACI,YAAA,CACA,uCAAA,CACA,+CAAA,CAGJ,WACI,2CAAA,CACA,uCAAA,CAGJ,cACI,cAAA,CACA,yCAAA,CACA,qCAAA,CACA,gCAAA,CAIR,SACI,oBAAA,CACA,UAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CACA,mCAAA,CACA,0BAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CACA,yEAAA,CAEA,uBACI,YAAA,CACA,uCAAA,CACA,+CAAA,CAGJ,eACI,2CAAA,CACA,uCAAA,CAGJ,kBACI,cAAA,CACA,yCAAA,CACA,qCAAA,CACA,gCAAA,CAIR,UACI,UAAA,CACA,eAAA,CACA,aAAA,CACA,oCAAA,CACA,oCAAA,CACA,eAAA,CAEA,yBARJ,UASQ,aAAA,CAAA,CAGJ,kBACI,qDAAA,CACA,2CAAA,CAGJ,gBACI,YAAA,CACA,kBAAA,CAEA,uBACI,cAAA,CAGJ,qBACI,cAAA,CACA,gBAAA,CAKJ,4BACI,aAAA,CACA,mCAAA,CACA,iBAAA,CAKZ,YACI,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,mCAAA,CAEA,kBACI,mCAAA,CAGI,mCACI,qCAAA,CACA,yBAAA,CAGJ,0CACI,SAAA,CAMZ,kBACI,aAAA,CACA,cAAA,CAGJ,kBACI,YAAA,CACA,kBAAA,CACA,wBAAA,CACA,gBAAA,CAGJ,iBACI,gBAAA,CAGJ,wBACI,SAAA,CACA,kCAAA,CACA,yBAAA,CAEA,6BACI,mCAAA,CAKJ,4BACI,gCAAA,CACA,4BAAA",sourcesContent:[":root {\r\n    --bg-color: #f9f9f9;\r\n    --bg-box-color: #fff;\r\n    --font-color: #0d1329;\r\n    --border-color: #edf0f6;\r\n    --primary-color: #2954ed;\r\n    --primary-color-hover: #0038ff;\r\n    --hover-color: #f5f8ff;\r\n\r\n    --done-color: #9de798;\r\n    --error-color: #fa8e79;\r\n\r\n    --bg-disabled-color: #eef0f3;\r\n    --text-disabled-color: #aeb3c5;\r\n\r\n    --font-family: 'Nunito Sans', sans-serif;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\ninput, button {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 15px;\r\n    font-family: var(--font-family);\r\n}\r\n\r\nbody {\r\n    background-color: var(--bg-color);\r\n    color: var(--font-color);\r\n    font-family: var(--font-family);\r\n    font-size: 15px;\r\n}\r\n\r\n.wrapper {\r\n    height: 100%;\r\n    padding: 3vw 0;\r\n}\r\n\r\n.page-title {\r\n    display: block;\r\n    text-align: center;\r\n    margin-bottom: 1vw;\r\n    text-transform: uppercase;\r\n    font-weight: 900;\r\n}\r\n\r\n.input {\r\n    display: block;\r\n    min-height: 42px;\r\n    line-height: 42px;\r\n    padding: 0 20px;\r\n    background-color: var(--bg-box-color);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 0 0;\r\n    transition: border-color 0.3s, box-shadow 0.3s;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        border-color: var(--primary-color);\r\n        box-shadow: 0 0 0 2px var(--primary-color);\r\n    }\r\n\r\n    &:hover {\r\n        border-color: var(--primary-color);\r\n    }\r\n}\r\n\r\n.btn {\r\n    display: inline-block;\r\n    min-height: 42px;\r\n    line-height: 42px;\r\n    padding: 0 30px;\r\n    background-color: var(--primary-color);\r\n    color: var(--bg-box-color);\r\n    border: 1px solid var(--primary-color);\r\n    border-radius: 10px;\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s;\r\n\r\n    &:focus-visible {\r\n        outline: none;\r\n        border-color: var(--primary-color-hover);\r\n        box-shadow: 0 0 0 2px var(--primary-color-hover);\r\n    }\r\n\r\n    &:hover {\r\n        background-color: var(--primary-color-hover);\r\n        border-color: var(--primary-color-hover);\r\n    }\r\n\r\n    &:disabled {\r\n        cursor: default;\r\n        background-color: var(--bg-disabled-color);\r\n        border-color: var(--bg-disabled-color);\r\n        color: var(--text-disabled-color);\r\n    }\r\n}\r\n\r\n.btn-ico {\r\n    display: inline-block;\r\n    width: 42px;\r\n    min-width: 42px;\r\n    min-height: 42px;\r\n    line-height: 42px;\r\n    background-color: var(--hover-color);\r\n    color: var(--primary-color);\r\n    border: 0;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s, color 0.3s;\r\n\r\n    &:focus-visible {\r\n        outline: none;\r\n        border-color: var(--primary-color-hover);\r\n        box-shadow: 0 0 0 2px var(--primary-color-hover);\r\n    }\r\n\r\n    &:hover {\r\n        background-color: var(--primary-color-hover);\r\n        border-color: var(--primary-color-hover);\r\n    }\r\n\r\n    &:disabled {\r\n        cursor: default;\r\n        background-color: var(--bg-disabled-color);\r\n        border-color: var(--bg-disabled-color);\r\n        color: var(--text-disabled-color);\r\n    }\r\n}\r\n\r\n.app-todo {\r\n    width: 100%;\r\n    max-width: 700px;\r\n    margin: 0 auto;\r\n    background-color: var(--bg-box-color);\r\n    border-radius: clamp(10px, 1.5vw, 30px);\r\n    overflow: hidden;\r\n\r\n    @media (max-width: 720px) {\r\n        max-width: 90%;\r\n    }\r\n\r\n    &__header {\r\n        padding: clamp(15px, 2.5vw, 50px) clamp(15px, 1.5vw, 30px);\r\n        border-bottom: 1px solid var(--border-color);\r\n    }\r\n\r\n    &__form {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        .input {\r\n            flex-basis: 80%;\r\n        }\r\n\r\n        .btn {\r\n            flex-basis: 20%;\r\n            margin-left: 15px;\r\n        }\r\n    }\r\n\r\n    &__list {\r\n        .empty-list {\r\n            display: block;\r\n            padding: 20px clamp(15px, 1.5vw, 30px);\r\n            text-align: center;\r\n        }\r\n    }\r\n}\r\n\r\n.todo-block {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 20px clamp(15px, 1.5vw, 30px);\r\n\r\n    &:hover {\r\n        background-color: var(--hover-color);\r\n\r\n        .todo-block {\r\n            &__btn {\r\n                background-color: var(--primary-color);\r\n                color: var(--bg-box-color);\r\n            }\r\n\r\n            &__btn-toggle {\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    &__time {\r\n        display: block;\r\n        font-size: 12px;\r\n    }\r\n\r\n    &__btns {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n        margin-left: 20px;\r\n    }\r\n\r\n    &__btn {\r\n        margin-left: 15px;\r\n    }\r\n\r\n    &__btn-toggle {\r\n        opacity: 0;\r\n        background-color: var(--done-color);\r\n        color: var(--bg-box-color);\r\n\r\n        &.done {\r\n            background-color: var(--error-color);\r\n        }\r\n    }\r\n\r\n    &--completed {\r\n        span {\r\n            color: var(--text-disabled-color);\r\n            text-decoration: line-through;\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const i=a},645:r=>{r.exports=function(r){var o=[];return o.toString=function(){return this.map((function(o){var n="",e=void 0!==o[5];return o[4]&&(n+="@supports (".concat(o[4],") {")),o[2]&&(n+="@media ".concat(o[2]," {")),e&&(n+="@layer".concat(o[5].length>0?" ".concat(o[5]):""," {")),n+=r(o),e&&(n+="}"),o[2]&&(n+="}"),o[4]&&(n+="}"),n})).join("")},o.i=function(r,n,e,t,A){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(e)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<r.length;l++){var d=[].concat(r[l]);e&&a[d[0]]||(void 0!==A&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=A),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),t&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=t):d[4]="".concat(t)),o.push(d))}},o}},537:r=>{r.exports=function(r){var o=r[1],n=r[3];if(!n)return o;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),A="/*# ".concat(t," */");return[o].concat([A]).join("\n")}return[o].join("\n")}},379:r=>{var o=[];function n(r){for(var n=-1,e=0;e<o.length;e++)if(o[e].identifier===r){n=e;break}return n}function e(r,e){for(var A={},a=[],i=0;i<r.length;i++){var c=r[i],l=e.base?c[0]+e.base:c[0],d=A[l]||0,s="".concat(l," ").concat(d);A[l]=d+1;var p=n(s),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)o[p].references++,o[p].updater(u);else{var b=t(u,e);e.byIndex=i,o.splice(i,0,{identifier:s,updater:b,references:1})}a.push(s)}return a}function t(r,o){var n=o.domAPI(o);return n.update(r),function(o){if(o){if(o.css===r.css&&o.media===r.media&&o.sourceMap===r.sourceMap&&o.supports===r.supports&&o.layer===r.layer)return;n.update(r=o)}else n.remove()}}r.exports=function(r,t){var A=e(r=r||[],t=t||{});return function(r){r=r||[];for(var a=0;a<A.length;a++){var i=n(A[a]);o[i].references--}for(var c=e(r,t),l=0;l<A.length;l++){var d=n(A[l]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}A=c}}},569:r=>{var o={};r.exports=function(r,n){var e=function(r){if(void 0===o[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}o[r]=n}return o[r]}(r);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},216:r=>{r.exports=function(r){var o=document.createElement("style");return r.setAttributes(o,r.attributes),r.insert(o,r.options),o}},565:(r,o,n)=>{r.exports=function(r){var o=n.nc;o&&r.setAttribute("nonce",o)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var o=r.insertStyleElement(r);return{update:function(n){!function(r,o,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var t=void 0!==n.layer;t&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,t&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var A=n.sourceMap;A&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),o.styleTagTransform(e,r,o.options)}(o,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(o)}}}},589:r=>{r.exports=function(r,o){if(o.styleSheet)o.styleSheet.cssText=r;else{for(;o.firstChild;)o.removeChild(o.firstChild);o.appendChild(document.createTextNode(r))}}}},o={};function n(e){var t=o[e];if(void 0!==t)return t.exports;var A=o[e]={id:e,exports:{}};return r[e](A,A.exports,n),A.exports}n.n=r=>{var o=r&&r.__esModule?()=>r.default:()=>r;return n.d(o,{a:o}),o},n.d=(r,o)=>{for(var e in o)n.o(o,e)&&!n.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:o[e]})},n.o=(r,o)=>Object.prototype.hasOwnProperty.call(r,o),n.nc=void 0,(()=>{function r(r){return"Minified Redux error #"+r+"; visit https://redux.js.org/Errors?code="+r+" for the full message or use the non-minified dev environment for full errors. "}var o="function"==typeof Symbol&&Symbol.observable||"@@observable",e=function(){return Math.random().toString(36).substring(7).split("").join(".")},t={INIT:"@@redux/INIT"+e(),REPLACE:"@@redux/REPLACE"+e(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+e()}};var A="ADD_TODO",a="REMOVE_TODO",i="TOGGLE_TODO";function c(r,o){(null==o||o>r.length)&&(o=r.length);for(var n=0,e=new Array(o);n<o;n++)e[n]=r[n];return e}var l="ACTIVE_FORM_BTN",d=function(r){return{type:l,payload:r}};const s=function(o){for(var n=Object.keys(o),e={},A=0;A<n.length;A++){var a=n[A];"function"==typeof o[a]&&(e[a]=o[a])}var i,c=Object.keys(e);try{!function(o){Object.keys(o).forEach((function(n){var e=o[n];if(void 0===e(void 0,{type:t.INIT}))throw new Error(r(12));if(void 0===e(void 0,{type:t.PROBE_UNKNOWN_ACTION()}))throw new Error(r(13))}))}(e)}catch(r){i=r}return function(o,n){if(void 0===o&&(o={}),i)throw i;for(var t=!1,A={},a=0;a<c.length;a++){var l=c[a],d=e[l],s=o[l],p=d(s,n);if(void 0===p)throw n&&n.type,new Error(r(14));A[l]=p,t=t||p!==s}return(t=t||c.length!==Object.keys(o).length)?A:o}}({active_form_btn:function(){var r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],o=arguments.length>1?arguments[1]:void 0;return o.type===l?o.payload:r},todos:function(){var r,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;switch(n.type){case A:return[].concat(function(r){if(Array.isArray(r))return c(r)}(r=o)||function(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}(r)||function(r,o){if(r){if("string"==typeof r)return c(r,o);var n=Object.prototype.toString.call(r).slice(8,-1);return"Object"===n&&r.constructor&&(n=r.constructor.name),"Map"===n||"Set"===n?Array.from(r):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(r,o):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{id:Date.now(),text:n.payload,completed:!1}]);case i:return o.map((function(r){return r.id===Number(n.payload)?Object.assign({},r,{completed:!r.completed}):r}));case a:return o.filter((function(r){return r.id!==Number(n.payload)}));default:return o}}});var p=n(379),u=n.n(p),b=n(795),f=n.n(b),C=n(569),v=n.n(C),g=n(565),m=n.n(g),h=n(216),y=n.n(h),x=n(589),w=n.n(x),k=n(800),_={};_.styleTagTransform=w(),_.setAttributes=m(),_.insert=v().bind(null,"head"),_.domAPI=f(),_.insertStyleElement=y(),u()(k.Z,_),k.Z&&k.Z.locals&&k.Z.locals;var B=function n(e,A,a){var i;if("function"==typeof A&&"function"==typeof a||"function"==typeof a&&"function"==typeof arguments[3])throw new Error(r(0));if("function"==typeof A&&void 0===a&&(a=A,A=void 0),void 0!==a){if("function"!=typeof a)throw new Error(r(1));return a(n)(e,A)}if("function"!=typeof e)throw new Error(r(2));var c=e,l=A,d=[],s=d,p=!1;function u(){s===d&&(s=d.slice())}function b(){if(p)throw new Error(r(3));return l}function f(o){if("function"!=typeof o)throw new Error(r(4));if(p)throw new Error(r(5));var n=!0;return u(),s.push(o),function(){if(n){if(p)throw new Error(r(6));n=!1,u();var e=s.indexOf(o);s.splice(e,1),d=null}}}function C(o){if(!function(r){if("object"!=typeof r||null===r)return!1;for(var o=r;null!==Object.getPrototypeOf(o);)o=Object.getPrototypeOf(o);return Object.getPrototypeOf(r)===o}(o))throw new Error(r(7));if(void 0===o.type)throw new Error(r(8));if(p)throw new Error(r(9));try{p=!0,l=c(l,o)}finally{p=!1}for(var n=d=s,e=0;e<n.length;e++)(0,n[e])();return o}return C({type:t.INIT}),(i={dispatch:C,subscribe:f,getState:b,replaceReducer:function(o){if("function"!=typeof o)throw new Error(r(10));c=o,C({type:t.REPLACE})}})[o]=function(){var n,e=f;return(n={subscribe:function(o){if("object"!=typeof o||null===o)throw new Error(r(11));function n(){o.next&&o.next(b())}return n(),{unsubscribe:e(n)}}})[o]=function(){return this},n},i}(s),I=document.getElementById("js_todo_form"),E=I.querySelector("button"),O=I.querySelector('[name="todo_text"]'),S=document.getElementById("js_todo_list");B.subscribe((function(){var r,o,n=B.getState();r=n.active_form_btn,o=E,r?o.removeAttribute("disabled"):o.setAttribute("disabled",""),function(r,o){if(r.innerText="",o.length)return o.map((function(o){var n='<div class="'.concat(o.completed?"todo-block todo-block--completed":"todo-block",'" data-id="').concat(o.id,'">\n            <div class="todo-block__text">\n                <span>').concat(o.text,'</span>\n                <span class="todo-block__time">').concat(new Date(o.id).toLocaleTimeString(),'</span>\n            </div>\n            <div class="todo-block__btns">\n                <button class="todo-block__btn-toggle btn-ico').concat(o.completed?" done":"",'">').concat(o.completed?"&#10008;":"&#10004;",'</button>\n                <button class="todo-block__btn btn-ico">&#10006;</button>\n            </div>\n        </div>');r.innerHTML+=n}));var n=r.getAttribute("data-empty-message");r.innerHTML='<div class="empty-list">'.concat(n||"","</div>")}(S,n.todos)})),O.addEventListener("input",(function(r){var o=this.value;""!==o?B.dispatch(d(!0)):B.dispatch(d(!1)),this.value=o})),I.addEventListener("submit",(function(r){var o;r.preventDefault(),""!==O.value&&(B.dispatch((o=O.value,{type:A,payload:o})),B.dispatch(d(!1)),O.value="")})),document.addEventListener("click",(function(r){var o=r.target.closest(".todo-block__btn"),n=r.target.closest(".todo-block__btn-toggle");if(o){var e=o.closest(".todo-block").getAttribute("data-id");e&&B.dispatch({type:a,payload:e})}if(n){var t=n.closest(".todo-block").getAttribute("data-id");t&&B.dispatch({type:i,payload:t})}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,